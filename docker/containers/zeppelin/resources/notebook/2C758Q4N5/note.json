{
  "paragraphs": [
    {
      "title": "Code Setup (JDBC to Spark DF Function)",
      "text": "%spark\nimport java.sql.Connection\nimport java.sql.DriverManager\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.Row\n\nval thinUrl \u003d \"jdbc:phoenix:thin:url\u003dhttp://phoenix.dev:8765;serialization\u003dPROTOBUF\"\nval connection \u003d DriverManager.getConnection(thinUrl)\n\n//Helper for turning JDBC query results into a DataSet\nval queryToDS \u003d (conn: Connection, query: String) \u003d\u003e {\n    val rs \u003d conn.createStatement().executeQuery(query)\n    val rsmd \u003d rs.getMetaData()\n    \n    //Build a schema object\n    var schemaString \u003d rsmd.getColumnName(1)\n    for ( i \u003c- 2 to rsmd.getColumnCount() ){\n        schemaString \u003d schemaString + \" \" + rsmd.getColumnName(i)\n    }\n    val fields \u003d schemaString.split(\" \")\n      .map(fieldName \u003d\u003e StructField(fieldName, StringType, nullable \u003d true))\n    val schema \u003d StructType(fields)\n    \n    //Convert resultset into DataFrame row by row\n    var rows \u003d Array[Row]()\n    while (rs.next()){\n      //Convert fields of each result set row into an array of Strings\n      val fields \u003d schemaString.split(\" \")\n      var row \u003d Array[String]()\n      for ( i \u003c- 0 to fields.size-1 ){\n        val fieldVal \u003d if (rs.getString(fields(i)) \u003d\u003d null) \"\" else rs.getString(fields(i)).trim\n        row \u003d row :+ fieldVal\n      }\n      rows \u003d rows :+ Row(row:_*)\n    }\n    spark.createDataFrame(sc.parallelize(rows), schema)\n}",
      "dateUpdated": "Dec 20, 2016 9:11:34 PM",
      "config": {
        "tableHide": true,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1482268294366_-85466512",
      "id": "20161128-043855_50680643",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nimport java.sql.Connection\n\nimport java.sql.DriverManager\n\nimport org.apache.spark.sql.types._\n\nimport org.apache.spark.sql.Row\n\nthinUrl: String \u003d jdbc:phoenix:thin:url\u003dhttp://phoenix.dev:8765;serialization\u003dPROTOBUF\n\nconnection: java.sql.Connection \u003d org.apache.calcite.avatica.AvaticaJdbc41Factory$AvaticaJdbc41Connection@7571eddc\n\nqueryToDS: (java.sql.Connection, String) \u003d\u003e org.apache.spark.sql.DataFrame \u003d \u003cfunction2\u003e\n"
      },
      "dateCreated": "Dec 20, 2016 9:11:34 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Code Setup (Set Angular Vars)",
      "text": "%angular\n\u003c!-- Avoid constantly editing JS and list the Angular vars you want exposed in an HTML attribute: --\u003e\n\u003cdiv id\u003d\"dummy\" vars\u003d\"id,parents,children,poidevice,childrenStr,parentsStr,devicetopology\"\u003e\u003c/div\u003e\n\u003cscript type\u003d\"text/javascript\"\u003e\n  //Given an element in the note \u0026 list of values to fetch from Spark\n  //window.angularVars.myVal will be current value of backend Spark val of same name\n  function hoist(element){\n    var varNames \u003d element.attr(\u0027vars\u0027).split(\u0027,\u0027);\n    window.angularVars \u003d {};\n    var scope \u003d angular.element(element.parent(\u0027.ng-scope\u0027)).scope().compiledScope;\n    $.each(varNames, function(i, v){\n      window[v+\u0027-watcher\u0027] \u003d scope.$watch(v, function(newVal, oldVal){\n        window.angularVars[v] \u003d newVal;\n      });\n    });\n  }\n  hoist($(\u0027#dummy\u0027));\n\u003c/script\u003e",
      "dateUpdated": "Dec 20, 2016 9:11:34 PM",
      "config": {
        "tableHide": true,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1482268294370_-99317472",
      "id": "20161114-012441_1232424357",
      "result": {
        "code": "SUCCESS",
        "type": "ANGULAR",
        "msg": "\u003c!-- Avoid constantly editing JS and list the Angular vars you want exposed in an HTML attribute: --\u003e\n\u003cdiv id\u003d\"dummy\" vars\u003d\"id,parents,children,poidevice,childrenStr,parentsStr,devicetopology\"\u003e\u003c/div\u003e\n\u003cscript type\u003d\"text/javascript\"\u003e\n  //Given an element in the note \u0026 list of values to fetch from Spark\n  //window.angularVars.myVal will be current value of backend Spark val of same name\n  function hoist(element){\n    var varNames \u003d element.attr(\u0027vars\u0027).split(\u0027,\u0027);\n    window.angularVars \u003d {};\n    var scope \u003d angular.element(element.parent(\u0027.ng-scope\u0027)).scope().compiledScope;\n    $.each(varNames, function(i, v){\n      window[v+\u0027-watcher\u0027] \u003d scope.$watch(v, function(newVal, oldVal){\n        window.angularVars[v] \u003d newVal;\n      });\n    });\n  }\n  hoist($(\u0027#dummy\u0027));\n\u003c/script\u003e"
      },
      "dateCreated": "Dec 20, 2016 9:11:34 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%jdbc(phoenix)\n\nselect * from DEVICE_INFO limit 10",
      "dateUpdated": "Dec 20, 2016 9:11:34 PM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "ID",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "DEVICE_TYPE",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "ID",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "DEVICE_TYPE",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1482268294371_-99702221",
      "id": "20161116-161710_2002953802",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "org.apache.hadoop.hbase.client.RetriesExhaustedException: Failed after attempts\u003d1, exceptions:\nMon Dec 19 19:48:47 UTC 2016, RpcRetryingCaller{globalStartTime\u003d1482176927230, pause\u003d100, retries\u003d1}, java.net.ConnectException: Connection refused\n\nclass java.sql.SQLException\norg.apache.phoenix.query.ConnectionQueryServicesImpl$13.call(ConnectionQueryServicesImpl.java:2579)\norg.apache.phoenix.query.ConnectionQueryServicesImpl$13.call(ConnectionQueryServicesImpl.java:2294)\norg.apache.phoenix.util.PhoenixContextExecutor.call(PhoenixContextExecutor.java:76)\norg.apache.phoenix.query.ConnectionQueryServicesImpl.init(ConnectionQueryServicesImpl.java:2294)\norg.apache.phoenix.jdbc.PhoenixDriver.getConnectionQueryServices(PhoenixDriver.java:232)\norg.apache.phoenix.jdbc.PhoenixEmbeddedDriver.createConnection(PhoenixEmbeddedDriver.java:147)\norg.apache.phoenix.jdbc.PhoenixDriver.connect(PhoenixDriver.java:202)\njava.sql.DriverManager.getConnection(DriverManager.java:664)\njava.sql.DriverManager.getConnection(DriverManager.java:208)\norg.apache.zeppelin.jdbc.JDBCInterpreter.getConnection(JDBCInterpreter.java:222)\norg.apache.zeppelin.jdbc.JDBCInterpreter.getStatement(JDBCInterpreter.java:233)\norg.apache.zeppelin.jdbc.JDBCInterpreter.executeSql(JDBCInterpreter.java:302)\norg.apache.zeppelin.jdbc.JDBCInterpreter.interpret(JDBCInterpreter.java:408)\norg.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:94)\norg.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:341)\norg.apache.zeppelin.scheduler.Job.run(Job.java:176)\norg.apache.zeppelin.scheduler.ParallelScheduler$JobRunner.run(ParallelScheduler.java:162)\njava.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\njava.util.concurrent.FutureTask.run(FutureTask.java:266)\njava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\njava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\njava.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\njava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\njava.lang.Thread.run(Thread.java:745)"
      },
      "dateCreated": "Dec 20, 2016 9:11:34 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Pick a Point-of-Interest (POI)",
      "text": "%spark\n\nimport org.apache.spark.sql.functions.{regexp_extract}\nimport org.apache.spark.ml.feature.{RegexTokenizer, Tokenizer}\n\nval id \u003d z.input(\"Enter POI (IP Address):\")\n\n// Extract POI Device\nval t0 \u003d java.lang.System.currentTimeMillis()\nval POIDevice \u003d queryToDS(connection, \"select * from device_info where ip \u003d \u0027\" + id + \"\u0027\").collect()\n\n\nval deviceDS \u003d queryToDS(connection, \"select * from device_topology where topology like \u0027%\"+id+\"%\u0027\")\nval devicetopology \u003d deviceDS.collect\n\n\n// Extract Parent Devices\nval t1 \u003d java.lang.System.currentTimeMillis()\nval pattern_parent \u003d id.toString + \".+\"\nval parent_regexTokenizer \u003d new RegexTokenizer().setInputCol(\"TOPOLOGY\").setOutputCol(\"parents\").setPattern(pattern_parent).setGaps(false)\nval parent_regexTokenized \u003d parent_regexTokenizer.transform(deviceDS)\n    .select(\"parents\").withColumn(\"parents2\", regexp_replace($\"parents\"(0), id.toString+\"\\\\|\", \"\"))\n    .drop(\"parents\")\nval parentDevices     \u003d parent_regexTokenized.select(\"parents2\").rdd.map(r \u003d\u003e r(0).toString.split(\"\\\\|\")).flatMap(x \u003d\u003e x).distinct().collect\nval parentDevicesStr  \u003d parentDevices.mkString(\"|\")\nval parentDevicesInfo \u003d queryToDS(connection, \"select * from device_info where ip in (\"+ parentDevices.map(x \u003d\u003e \"\u0027\"+x+\"\u0027\").mkString(\",\") +\")\" ).collect\n\nval parent_runtime \u003d (java.lang.System.currentTimeMillis() - t1).toString\n\n\n// Extract Children Devices\nval t2 \u003d java.lang.System.currentTimeMillis()\nval pattern_children \u003d \".*?\" + id.toString\nval children_regexTokenizer \u003d new RegexTokenizer().setInputCol(\"TOPOLOGY\").setOutputCol(\"children\").setPattern(pattern_children).setGaps(false)\nval children_regexTokenized \u003d children_regexTokenizer.transform(deviceDS)\n    .select(\"children\").withColumn(\"children2\", regexp_replace($\"children\"(0), id.toString+\"\\\\|\", \"\"))\n    .drop(\"children\")\nval childrenDevices     \u003d children_regexTokenized.select(\"children2\").rdd.map(r \u003d\u003e r(0).toString.split(\"\\\\|\")).flatMap(x \u003d\u003e x).distinct().collect\nval childrenDevicesStr  \u003d childrenDevices.mkString(\"|\")\nval childrenDevicesInfo \u003d queryToDS(connection, \"select * from device_info where ip in (\"+ childrenDevices.map(x \u003d\u003e \"\u0027\"+x+\"\u0027\").mkString(\",\") +\")\" ).collect\n\n\nprintln(\"\\r\\n\\r\\n\")\nprintln(\"Got \" + parentDevicesInfo.size.toString + \" parent devices in \" + parent_runtime + \" ms\")\nprintln(\"Got \" + childrenDevicesInfo.size.toString + \" child devices in \" + (java.lang.System.currentTimeMillis() - t2).toString + \" ms\")\nprintln(\"\\r\\n\\r\\n\")\n\n\nz.angularBind(\"poidevice\", POIDevice)\nz.angularBind(\"parents\", parentDevicesInfo)\nz.angularBind(\"parentsStr\", parentDevicesStr)\nz.angularBind(\"children\", childrenDevicesInfo)\nz.angularBind(\"childrenStr\", childrenDevicesStr)\nz.angularBind(\"devicetopology\", devicetopology)\nz.angularBind(\"id\", id)\nz.run(\"20161112-195716_1056217064\")\n\n\nchildrenDevicesInfo.foreach(x \u003d\u003e println(x))",
      "dateUpdated": "Dec 20, 2016 9:12:03 PM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {
          "Enter POI (IP Address):": "localhost",
          "IP:": "",
          "id": "216.239.40.138"
        },
        "forms": {
          "Enter POI (IP Address):": {
            "name": "Enter POI (IP Address):",
            "displayName": "Enter POI (IP Address):",
            "type": "input",
            "defaultValue": "",
            "hidden": false
          }
        }
      },
      "jobName": "paragraph_1482268294372_-101625965",
      "id": "20161218-042151_1028858024",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nimport org.apache.spark.sql.functions.regexp_extract\n\nimport org.apache.spark.ml.feature.{RegexTokenizer, Tokenizer}\n\nid: Object \u003d localhost\n\nt0: Long \u003d 1482165860613\n\nPOIDevice: Array[org.apache.spark.sql.Row] \u003d Array([localhost,United States,NC,Raleigh,-78.6382,35.7796,Time Warner Cable,Time Warner Cable,1,80.0999984741211,10.100000381469727,0])\n\ndeviceDS: org.apache.spark.sql.DataFrame \u003d [TOPOLOGY: string]\ndevicetopology: Array[org.apache.spark.sql.Row] \u003d Array([localhost|174.111.102.224|24.25.62.48|24.93.64.184|24.93.67.200|66.109.6.80|216.50.79.33|216.50.79.66|216.239.62.139|216.239.48.95|216.239.49.181|216.239.48.95|216.239.48.9|216.239.48.6|216.239.40.138|209.85.142.139|209.85.241.71|216.58.218.14], [localhost|174.111.102.224|24.25.62.48|24.93.64.184|24.93.67.200|66.109.6.80|216.50.79.33|216.50.79.66|216.239.62.139|216.58.215.46|216.239.48.101|216.239.48.95|216.239.49.181|216.239.48.9|216.239.40.138|216.239.40.130|108.170.232.70|209.85.241.71|216.58.218.14], [localhost|174.111.102.224|24.25.62.48|24.93.64.184|24.93.67.200|66.109.6.80|216.50.79.33|216.50.79.66|216.239.62.139|216.58.215.46|216.239.48.101|216.239.49.181|216.239.48.101|216.239.48.6|216.239.48.9|216.239.40.138|216.239.40.1...\nt1: Long \u003d 1482165864657\n\npattern_parent: String \u003d localhost.+\n\nparent_regexTokenizer: org.apache.spark.ml.feature.RegexTokenizer \u003d regexTok_c192a4fb87e2\n\nparent_regexTokenized: org.apache.spark.sql.DataFrame \u003d [parents2: string]\nparentDevices: Array[String] \u003d Array(66.249.94.20, 174.111.102.224, 209.85.142.140, 205.197.180.41, 216.50.79.66, 64.233.175.12, 108.170.235.157, 108.170.232.71, 216.239.48.9, 66.109.6.82, 216.58.218.14, 173.194.219.139, 216.239.51.243, 216.50.79.33, 209.85.248.53, 173.194.219.113, 216.239.50.93, 216.239.50.97, 74.125.196.102, 216.239.51.47, 216.58.193.142, 216.239.48.95, 74.125.21.100, 64.233.174.133, 216.239.40.138, 216.239.48.101, 216.239.48.2, 216.239.56.166, 209.85.253.1, 209.85.142.138, 24.93.64.184, 64.233.185.100, 209.85.247.150, 209.85.142.149, 216.239.48.6, 209.85.254.107, 216.239.40.130, 24.93.67.200, 24.25.62.50, 66.109.6.80, 209.85.142.153, 209.85.243.254, 216.239.49.181, 64.233.185.138, 216.239.62.139, 74.125.21.101, 216.58.215.46, 209.85.142.139, 64.233.185.101, 64.233.17...parentDevicesStr: String \u003d 66.249.94.20|174.111.102.224|209.85.142.140|205.197.180.41|216.50.79.66|64.233.175.12|108.170.235.157|108.170.232.71|216.239.48.9|66.109.6.82|216.58.218.14|173.194.219.139|216.239.51.243|216.50.79.33|209.85.248.53|173.194.219.113|216.239.50.93|216.239.50.97|74.125.196.102|216.239.51.47|216.58.193.142|216.239.48.95|74.125.21.100|64.233.174.133|216.239.40.138|216.239.48.101|216.239.48.2|216.239.56.166|209.85.253.1|209.85.142.138|24.93.64.184|64.233.185.100|209.85.247.150|209.85.142.149|216.239.48.6|209.85.254.107|216.239.40.130|24.93.67.200|24.25.62.50|66.109.6.80|209.85.142.153|209.85.243.254|216.239.49.181|64.233.185.138|216.239.62.139|74.125.21.101|216.58.215.46|209.85.142.139|64.233.185.101|64.233.175.94|209.85.142.157|74.125.196.100|216.239.51.245|205.197.1...parentDevicesInfo: Array[org.apache.spark.sql.Row] \u003d Array([108.170.232.70,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,16,80.0999984741211,10.100000381469727,0], [108.170.232.71,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,14,80.0999984741211,10.100000381469727,0], [108.170.235.157,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,11,80.0999984741211,10.100000381469727,0], [173.194.219.113,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,18,80.0999984741211,10.100000381469727,0], [173.194.219.138,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,19,80.0999984741211,10.100000381469727,0], [173.194.219.139,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,18,80.0999984741211,10.100000381469727,0], [1...\nparent_runtime: String \u003d 3451\n\nt2: Long \u003d 1482165868162\n\npattern_children: String \u003d .*?localhost\n\nchildren_regexTokenizer: org.apache.spark.ml.feature.RegexTokenizer \u003d regexTok_7ccd11b5d9da\n\nchildren_regexTokenized: org.apache.spark.sql.DataFrame \u003d [children2: string]\n\nchildrenDevices: Array[String] \u003d Array(localhost)\n\nchildrenDevicesStr: String \u003d localhost\n\nchildrenDevicesInfo: Array[org.apache.spark.sql.Row] \u003d Array([localhost,United States,NC,Raleigh,-78.6382,35.7796,Time Warner Cable,Time Warner Cable,1,80.0999984741211,10.100000381469727,0])\n\r\n\r\n\nGot 76 parent devices in 3451 ms\nGot 1 child devices in 1025 ms\n\r\n\r\n\n[localhost,United States,NC,Raleigh,-78.6382,35.7796,Time Warner Cable,Time Warner Cable,1,80.0999984741211,10.100000381469727,0]\n"
      },
      "dateCreated": "Dec 20, 2016 9:11:34 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Google Map of IP Traceroute (from home wifi, in Raleigh, to Google.com servers)",
      "text": "%angular\n\u003cdiv id\u003d\"map\" style\u003d\"height:500px;width:100%;\"\u003e\u003c/div\u003e\n\u003cscript type\u003d\"text/javascript\"\u003e\nfunction circle(pos, color, info, map){\n    var circle \u003d new google.maps.Circle({\n        strokeColor: color,\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: color,\n        fillOpacity: 0.35,\n        map: map,\n        center: pos,\n        radius: 30000   //default: 6.5\n    });\n    var info \u003d new google.maps.InfoWindow({content: info});\n    circle.addListener(\u0027click\u0027, function(){\n        info.open(map, circle);\n        info.setPosition(circle.getCenter());\n    });\n}\n\nfunction line(coords, dashed, map){\n    var lineConf \u003d {\n        path: coords,\n        geodesic: true,\n        strokeColor: \u0027#000000\u0027,\n        strokeOpacity: 0.75,\n        strokeWeight: 2  // default \u003d 1\n    };\n    if (dashed) lineConf.icons \u003d [{\n        icon: { path: \u0027M 0,-1 0,1\u0027, strokeOpacity: 1, scale: 3 },\n        offset: \u00270\u0027,\n        repeat: \u002720px\u0027\n    }];\n    var path \u003d new google.maps.Polyline(lineConf);\n    path.setMap(map);\n}\n\nfunction initMap() {\n    var id \u003d window.angularVars.id;\n    var poidevice \u003d window.angularVars.poidevice;\n    var children \u003d window.angularVars.children;\n    var childrenStr \u003d window.angularVars.childrenStr;\n    var parents \u003d window.angularVars.parents;\n    var parentsStr \u003d window.angularVars.parentsStr;\n    var devicetopology \u003d window.angularVars.devicetopology;\n    var POIs \u003d {};\n\n    console.log(\u0027POI Value: \u0027 + poidevice[0].values);\n    console.log(\u0027Topology Value: \u0027 + devicetopology[0].values.toString().split(\"|\")[0]);\n\n    var USA \u003d {lat: 39.8282, lng: -98.5795};\n    var map \u003d new google.maps.Map(document.getElementById(\u0027map\u0027), {zoom: 5, center: USA });\n\n    //**********************************************************************************\n    //\n    //  Draw circle POI Device\n    //\n    //**********************************************************************************\n    $.each(poidevice, function(i, v){\n        POIs[v.values[0]] \u003d v.values;\n        //Create marker for each POI\n        var pos \u003d {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color \u003d (v.values[11] \u003d\u003d \u00271.0\u0027) ? \u0027#FF0000\u0027 : \u0027#008000\u0027;\n        var info \u003d \u0027\u003cb\u003eIP\u003c/b\u003e: \u0027 + v.values[0] + \u0027\u003cp\u003e\u003cb\u003eISP:\u003c/b\u003e \u0027 + v.values[6] + \u0027\u003cp\u003e\u0027 + v.values[3] + \", \" + v.values[2];\n        console.log(\u0027Drawing POI device: \u0027 + v.values[0] + \u0027 \u0027 + JSON.stringify(pos) + \u0027 \u0027 + v.values[5] + \u0027,\u0027 + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw circles for each Parent POI\n    //\n    //**********************************************************************************\n    $.each(parents, function(i, v){\n        POIs[v.values[0]] \u003d v.values;\n        //Create marker for each POI\n        var pos \u003d {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color \u003d (v.values[11] \u003d\u003d \u00271.0\u0027) ? \u0027#FF0000\u0027 : \u0027#008000\u0027;\n        var info \u003d \u0027\u003cb\u003eIP\u003c/b\u003e: \u0027 + v.values[0] + \u0027\u003cp\u003e\u003cb\u003eISP:\u003c/b\u003e \u0027 + v.values[6] + \u0027\u003cp\u003e\u0027 + v.values[3] + \", \" + v.values[2];\n        console.log(\u0027Drawing parent device: \u0027 + v.values[0] + \u0027 \u0027 + JSON.stringify(pos) + \u0027 \u0027 + v.values[5] + \u0027,\u0027 + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw circles for each Child POI\n    //\n    //**********************************************************************************\n    $.each(children, function(i, v){\n        POIs[v.values[0]] \u003d v.values;\n        //Create marker for each POI\n        var pos \u003d {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color \u003d (v.values[11] \u003d\u003d \u00271.0\u0027) ? \u0027#FF0000\u0027 : \u0027#008000\u0027;\n        var info \u003d \u0027\u003cb\u003eIP\u003c/b\u003e: \u0027 + v.values[0] + \u0027\u003cp\u003e\u003cb\u003eISP:\u003c/b\u003e \u0027 + v.values[6] + \u0027\u003cp\u003e\u0027 + v.values[3] + \", \" + v.values[2];\n        console.log(\u0027Drawing child device: \u0027 + v.values[0] + \u0027 \u0027 + JSON.stringify(pos) + \u0027 \u0027 + v.values[5] + \u0027,\u0027 + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw Google Maps polylines\n    //\n    //**********************************************************************************\n    \n    var POI \u003d poidevice[0].values;\n    var start \u003d {lat: parseFloat(POI[5]), lng: parseFloat(POI[4])};\n\n    var coords     \u003d [];\n    var seen_cords \u003d [];\n    //var coords \u003d [start];\n  \n    // Loop through each device topology that contains POI\n    $.each(devicetopology, function(j, k){\n        var topology \u003d k.values.toString().split(\"|\");\n        var coords     \u003d [];\n        var seen_cords \u003d [];\n        for (i \u003d 0; i \u003c topology.length; i++) {\n            try{\n                var lat \u003d POIs[topology[i]][5];\n                var lon \u003d POIs[topology[i]][4];\n                //if ( seen_cords.indexOf(lat + \u0027_\u0027 + lon) \u003d\u003d -1 ){\n                    //coords.push({lat: parseFloat(POIs[topology[i]][5]), lng: parseFloat(POIs[topology[i]][4]) });\n                    coords.push({lat: parseFloat(lat), lng: parseFloat(lon) });\n                    seen_cords.push(lat + \u0027_\u0027 + lon);\n                    //console.log(\"seen cords: \" + lat + \u0027_\u0027 + lon);\n                //};\n            }\n            catch (exception) {\n            };\n        };\n        console.log(\u0027Drawing topology \u0027 + JSON.stringify(coords));\n        line(coords, false, map);\n    });\n\n    map.setCenter(start);\n\n}\n\n//Only load GMaps once\nif (typeof google \u003d\u003d\u003d \u0027object\u0027 \u0026\u0026 typeof google.maps \u003d\u003d\u003d \u0027object\u0027) initMap();\nelse {\n    var script \u003d document.createElement(\"script\");\n    script.type \u003d \"text/javascript\";\n    //Replace with your API key\n    //var apiKey \u003d \u0027AIzaSyAo9kHi0vp_Up_iqeUNyDOzxiaVan8CY50\u0027;\n    var apiKey \u003d \u0027AIzaSyDelWwzG32w6aDi9WsLiw2qP_JHAbQHG3A\u0027;\n    script.src \u003d \"https://maps.googleapis.com/maps/api/js?key\u003d\"+apiKey+\"\u0026callback\u003dinitMap\";\n    document.body.appendChild(script);\n}\n\u003c/script\u003e",
      "dateUpdated": "Dec 20, 2016 9:11:34 PM",
      "config": {
        "lineNumbers": true,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1482268294373_-102010714",
      "id": "20161112-195716_1056217064",
      "result": {
        "code": "SUCCESS",
        "type": "ANGULAR",
        "msg": "\u003cdiv id\u003d\"map\" style\u003d\"height:500px;width:100%;\"\u003e\u003c/div\u003e\n\u003cscript type\u003d\"text/javascript\"\u003e\nfunction circle(pos, color, info, map){\n    var circle \u003d new google.maps.Circle({\n        strokeColor: color,\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: color,\n        fillOpacity: 0.35,\n        map: map,\n        center: pos,\n        radius: 30000   //default: 6.5\n    });\n    var info \u003d new google.maps.InfoWindow({content: info});\n    circle.addListener(\u0027click\u0027, function(){\n        info.open(map, circle);\n        info.setPosition(circle.getCenter());\n    });\n}\n\nfunction line(coords, dashed, map){\n    var lineConf \u003d {\n        path: coords,\n        geodesic: true,\n        strokeColor: \u0027#000000\u0027,\n        strokeOpacity: 0.75,\n        strokeWeight: 2  // default \u003d 1\n    };\n    if (dashed) lineConf.icons \u003d [{\n        icon: { path: \u0027M 0,-1 0,1\u0027, strokeOpacity: 1, scale: 3 },\n        offset: \u00270\u0027,\n        repeat: \u002720px\u0027\n    }];\n    var path \u003d new google.maps.Polyline(lineConf);\n    path.setMap(map);\n}\n\nfunction initMap() {\n    var id \u003d window.angularVars.id;\n    var poidevice \u003d window.angularVars.poidevice;\n    var children \u003d window.angularVars.children;\n    var childrenStr \u003d window.angularVars.childrenStr;\n    var parents \u003d window.angularVars.parents;\n    var parentsStr \u003d window.angularVars.parentsStr;\n    var devicetopology \u003d window.angularVars.devicetopology;\n    var POIs \u003d {};\n\n    console.log(\u0027POI Value: \u0027 + poidevice[0].values);\n    console.log(\u0027Topology Value: \u0027 + devicetopology[0].values.toString().split(\"|\")[0]);\n\n    var USA \u003d {lat: 39.8282, lng: -98.5795};\n    var map \u003d new google.maps.Map(document.getElementById(\u0027map\u0027), {zoom: 5, center: USA });\n\n    //**********************************************************************************\n    //\n    //  Draw circle POI Device\n    //\n    //**********************************************************************************\n    $.each(poidevice, function(i, v){\n        POIs[v.values[0]] \u003d v.values;\n        //Create marker for each POI\n        var pos \u003d {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color \u003d (v.values[11] \u003d\u003d \u00271.0\u0027) ? \u0027#FF0000\u0027 : \u0027#008000\u0027;\n        var info \u003d \u0027\u003cb\u003eIP\u003c/b\u003e: \u0027 + v.values[0] + \u0027\u003cp\u003e\u003cb\u003eISP:\u003c/b\u003e \u0027 + v.values[6] + \u0027\u003cp\u003e\u0027 + v.values[3] + \", \" + v.values[2];\n        console.log(\u0027Drawing POI device: \u0027 + v.values[0] + \u0027 \u0027 + JSON.stringify(pos) + \u0027 \u0027 + v.values[5] + \u0027,\u0027 + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw circles for each Parent POI\n    //\n    //**********************************************************************************\n    $.each(parents, function(i, v){\n        POIs[v.values[0]] \u003d v.values;\n        //Create marker for each POI\n        var pos \u003d {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color \u003d (v.values[11] \u003d\u003d \u00271.0\u0027) ? \u0027#FF0000\u0027 : \u0027#008000\u0027;\n        var info \u003d \u0027\u003cb\u003eIP\u003c/b\u003e: \u0027 + v.values[0] + \u0027\u003cp\u003e\u003cb\u003eISP:\u003c/b\u003e \u0027 + v.values[6] + \u0027\u003cp\u003e\u0027 + v.values[3] + \", \" + v.values[2];\n        console.log(\u0027Drawing parent device: \u0027 + v.values[0] + \u0027 \u0027 + JSON.stringify(pos) + \u0027 \u0027 + v.values[5] + \u0027,\u0027 + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw circles for each Child POI\n    //\n    //**********************************************************************************\n    $.each(children, function(i, v){\n        POIs[v.values[0]] \u003d v.values;\n        //Create marker for each POI\n        var pos \u003d {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color \u003d (v.values[11] \u003d\u003d \u00271.0\u0027) ? \u0027#FF0000\u0027 : \u0027#008000\u0027;\n        var info \u003d \u0027\u003cb\u003eIP\u003c/b\u003e: \u0027 + v.values[0] + \u0027\u003cp\u003e\u003cb\u003eISP:\u003c/b\u003e \u0027 + v.values[6] + \u0027\u003cp\u003e\u0027 + v.values[3] + \", \" + v.values[2];\n        console.log(\u0027Drawing child device: \u0027 + v.values[0] + \u0027 \u0027 + JSON.stringify(pos) + \u0027 \u0027 + v.values[5] + \u0027,\u0027 + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw Google Maps polylines\n    //\n    //**********************************************************************************\n    \n    var POI \u003d poidevice[0].values;\n    var start \u003d {lat: parseFloat(POI[5]), lng: parseFloat(POI[4])};\n\n    var coords     \u003d [];\n    var seen_cords \u003d [];\n    //var coords \u003d [start];\n  \n    // Loop through each device topology that contains POI\n    $.each(devicetopology, function(j, k){\n        var topology \u003d k.values.toString().split(\"|\");\n        var coords     \u003d [];\n        var seen_cords \u003d [];\n        for (i \u003d 0; i \u003c topology.length; i++) {\n            try{\n                var lat \u003d POIs[topology[i]][5];\n                var lon \u003d POIs[topology[i]][4];\n                //if ( seen_cords.indexOf(lat + \u0027_\u0027 + lon) \u003d\u003d -1 ){\n                    //coords.push({lat: parseFloat(POIs[topology[i]][5]), lng: parseFloat(POIs[topology[i]][4]) });\n                    coords.push({lat: parseFloat(lat), lng: parseFloat(lon) });\n                    seen_cords.push(lat + \u0027_\u0027 + lon);\n                    //console.log(\"seen cords: \" + lat + \u0027_\u0027 + lon);\n                //};\n            }\n            catch (exception) {\n            };\n        };\n        console.log(\u0027Drawing topology \u0027 + JSON.stringify(coords));\n        line(coords, false, map);\n    });\n\n    map.setCenter(start);\n\n}\n\n//Only load GMaps once\nif (typeof google \u003d\u003d\u003d \u0027object\u0027 \u0026\u0026 typeof google.maps \u003d\u003d\u003d \u0027object\u0027) initMap();\nelse {\n    var script \u003d document.createElement(\"script\");\n    script.type \u003d \"text/javascript\";\n    //Replace with your API key\n    //var apiKey \u003d \u0027AIzaSyAo9kHi0vp_Up_iqeUNyDOzxiaVan8CY50\u0027;\n    var apiKey \u003d \u0027AIzaSyDelWwzG32w6aDi9WsLiw2qP_JHAbQHG3A\u0027;\n    script.src \u003d \"https://maps.googleapis.com/maps/api/js?key\u003d\"+apiKey+\"\u0026callback\u003dinitMap\";\n    document.body.appendChild(script);\n}\n\u003c/script\u003e"
      },
      "dateCreated": "Dec 20, 2016 9:11:34 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Dec 20, 2016 9:11:34 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1482268294374_-100856468",
      "id": "20161116-161810_782876520",
      "dateCreated": "Dec 20, 2016 9:11:34 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Dashboard",
  "id": "2C758Q4N5",
  "angularObjects": {
    "2C35SAQUV:shared_process": [],
    "2C1SVJQKC:shared_process": [],
    "2BZCYSBP1:shared_process": [],
    "2C3QWZMH9:shared_process": [],
    "2C2VCMDMA:shared_process": [],
    "2C2DNH7EH:shared_process": [],
    "2C2J776HS:shared_process": [],
    "2C24HD65R:shared_process": [],
    "2C33UV8C1:shared_process": []
  },
  "config": {},
  "info": {}
}