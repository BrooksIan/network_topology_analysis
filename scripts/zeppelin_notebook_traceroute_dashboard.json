{"paragraphs":[{"title":"Code Setup (JDBC to Spark DF Function)","text":"%spark\nimport java.sql.Connection\nimport java.sql.DriverManager\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.Row\n\nval thinUrl = \"jdbc:phoenix:thin:url=http://phoenix.dev:8765;serialization=PROTOBUF\"\nval connection = DriverManager.getConnection(thinUrl)\n\n//Helper for turning JDBC query results into a DataSet\nval queryToDS = (conn: Connection, query: String) => {\n    val rs = conn.createStatement().executeQuery(query)\n    val rsmd = rs.getMetaData()\n    \n    //Build a schema object\n    var schemaString = rsmd.getColumnName(1)\n    for ( i <- 2 to rsmd.getColumnCount() ){\n        schemaString = schemaString + \" \" + rsmd.getColumnName(i)\n    }\n    val fields = schemaString.split(\" \")\n      .map(fieldName => StructField(fieldName, StringType, nullable = true))\n    val schema = StructType(fields)\n    \n    //Convert resultset into DataFrame row by row\n    var rows = Array[Row]()\n    while (rs.next()){\n      //Convert fields of each result set row into an array of Strings\n      val fields = schemaString.split(\" \")\n      var row = Array[String]()\n      for ( i <- 0 to fields.size-1 ){\n        val fieldVal = if (rs.getString(fields(i)) == null) \"\" else rs.getString(fields(i)).trim\n        row = row :+ fieldVal\n      }\n      rows = rows :+ Row(row:_*)\n    }\n    spark.createDataFrame(sc.parallelize(rows), schema)\n}","dateUpdated":"2017-01-03T13:24:42+0000","config":{"tableHide":true,"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483449882788_-668872757","id":"20161128-043855_50680643","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport java.sql.Connection\n\nimport java.sql.DriverManager\n\nimport org.apache.spark.sql.types._\n\nimport org.apache.spark.sql.Row\n\nthinUrl: String = jdbc:phoenix:thin:url=http://phoenix.dev:8765;serialization=PROTOBUF\n\nconnection: java.sql.Connection = org.apache.calcite.avatica.AvaticaJdbc41Factory$AvaticaJdbc41Connection@3fad10d2\n\nqueryToDS: (java.sql.Connection, String) => org.apache.spark.sql.DataFrame = <function2>\n"},"dateCreated":"2017-01-03T13:24:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:121"},{"title":"Code Setup (Set Angular Vars)","text":"%angular\n<!-- Avoid constantly editing JS and list the Angular vars you want exposed in an HTML attribute: -->\n<div id=\"dummy\" vars=\"id,parents,children,poidevice,childrenStr,parentsStr,devicetopology\"></div>\n<script type=\"text/javascript\">\n  //Given an element in the note & list of values to fetch from Spark\n  //window.angularVars.myVal will be current value of backend Spark val of same name\n  function hoist(element){\n    var varNames = element.attr('vars').split(',');\n    window.angularVars = {};\n    var scope = angular.element(element.parent('.ng-scope')).scope().compiledScope;\n    $.each(varNames, function(i, v){\n      window[v+'-watcher'] = scope.$watch(v, function(newVal, oldVal){\n        window.angularVars[v] = newVal;\n      });\n    });\n  }\n  hoist($('#dummy'));\n</script>","dateUpdated":"2017-01-03T13:24:42+0000","config":{"tableHide":true,"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483449882790_-668103259","id":"20161114-012441_1232424357","result":{"code":"SUCCESS","type":"ANGULAR","msg":"<!-- Avoid constantly editing JS and list the Angular vars you want exposed in an HTML attribute: -->\n<div id=\"dummy\" vars=\"id,parents,children,poidevice,childrenStr,parentsStr,devicetopology\"></div>\n<script type=\"text/javascript\">\n  //Given an element in the note & list of values to fetch from Spark\n  //window.angularVars.myVal will be current value of backend Spark val of same name\n  function hoist(element){\n    var varNames = element.attr('vars').split(',');\n    window.angularVars = {};\n    var scope = angular.element(element.parent('.ng-scope')).scope().compiledScope;\n    $.each(varNames, function(i, v){\n      window[v+'-watcher'] = scope.$watch(v, function(newVal, oldVal){\n        window.angularVars[v] = newVal;\n      });\n    });\n  }\n  hoist($('#dummy'));\n</script>"},"dateCreated":"2017-01-03T13:24:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:122"},{"text":"%jdbc(phoenix)\n\nselect * from DEVICE_INFO limit 10","dateUpdated":"2017-01-03T13:24:42+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483449882790_-668103259","id":"20161116-161710_2002953802","result":{"code":"SUCCESS","type":"TABLE","msg":"IP\tCOUNTRY\tREGION\tCITY\tLONGITUDE\tLATITUDE\tISP\tORG\tLEVEL\tSIGNAL_STRENGTH\tSIGNAL_NOISE\tHEALTH_STATUS\n108.170.232.70\tUnited States\tCA\tMountain View\t-122.0574\t37.4192\tGoogle\tGoogle\t18\t80.1\t10.1\t0\n108.170.232.71\tUnited States\tCA\tMountain View\t-122.0574\t37.4192\tGoogle\tGoogle\t11\t80.1\t10.1\t0\n108.170.235.157\tUnited States\tCA\tMountain View\t-122.0574\t37.4192\tGoogle\tGoogle\t12\t80.1\t10.1\t0\n173.194.219.113\tUnited States\tCA\tMountain View\t-122.0574\t37.4192\tGoogle\tGoogle\t18\t80.1\t10.1\t0\n173.194.219.138\tUnited States\tCA\tMountain View\t-122.0574\t37.4192\tGoogle\tGoogle\t19\t80.1\t10.1\t0\n173.194.219.139\tUnited States\tCA\tMountain View\t-122.0574\t37.4192\tGoogle\tGoogle\t18\t80.1\t10.1\t0\n174.111.102.224\tUnited States\tNC\tHigh Point\t-80.0053\t35.9557\tTime Warner Cable\tTime Warner Cable\t2\t80.1\t10.1\t0\n174.111.102.226\tUnited States\tNC\tHigh Point\t-80.0053\t35.9557\tTime Warner Cable\tTime Warner Cable\t2\t80.1\t10.1\t0\n205.197.180.41\tUnited States\tIL\tChicago\t-87.6441\t41.8825\tXO Communications\tXO Communications\t6\t80.1\t10.1\t0\n205.197.180.54\tUnited States\tIL\tChicago\t-87.6441\t41.8825\tXO Communications\tXO Communications\t7\t80.1\t10.1\t0\n","comment":"","msgTable":[[{"key":"COUNTRY","value":"108.170.232.70"},{"key":"COUNTRY","value":"United States"},{"key":"COUNTRY","value":"CA"},{"key":"COUNTRY","value":"Mountain View"},{"key":"COUNTRY","value":"-122.0574"},{"key":"COUNTRY","value":"37.4192"},{"key":"COUNTRY","value":"Google"},{"key":"COUNTRY","value":"Google"},{"key":"COUNTRY","value":"18"},{"key":"COUNTRY","value":"80.1"},{"key":"COUNTRY","value":"10.1"},{"key":"COUNTRY","value":"0"}],[{"key":"REGION","value":"108.170.232.71"},{"key":"REGION","value":"United States"},{"key":"REGION","value":"CA"},{"key":"REGION","value":"Mountain View"},{"key":"REGION","value":"-122.0574"},{"key":"REGION","value":"37.4192"},{"key":"REGION","value":"Google"},{"key":"REGION","value":"Google"},{"key":"REGION","value":"11"},{"key":"REGION","value":"80.1"},{"key":"REGION","value":"10.1"},{"key":"REGION","value":"0"}],[{"key":"CITY","value":"108.170.235.157"},{"key":"CITY","value":"United States"},{"key":"CITY","value":"CA"},{"key":"CITY","value":"Mountain View"},{"key":"CITY","value":"-122.0574"},{"key":"CITY","value":"37.4192"},{"key":"CITY","value":"Google"},{"key":"CITY","value":"Google"},{"key":"CITY","value":"12"},{"key":"CITY","value":"80.1"},{"key":"CITY","value":"10.1"},{"key":"CITY","value":"0"}],[{"key":"LONGITUDE","value":"173.194.219.113"},{"key":"LONGITUDE","value":"United States"},{"key":"LONGITUDE","value":"CA"},{"key":"LONGITUDE","value":"Mountain View"},{"key":"LONGITUDE","value":"-122.0574"},{"key":"LONGITUDE","value":"37.4192"},{"key":"LONGITUDE","value":"Google"},{"key":"LONGITUDE","value":"Google"},{"key":"LONGITUDE","value":"18"},{"key":"LONGITUDE","value":"80.1"},{"key":"LONGITUDE","value":"10.1"},{"key":"LONGITUDE","value":"0"}],[{"key":"LATITUDE","value":"173.194.219.138"},{"key":"LATITUDE","value":"United States"},{"key":"LATITUDE","value":"CA"},{"key":"LATITUDE","value":"Mountain View"},{"key":"LATITUDE","value":"-122.0574"},{"key":"LATITUDE","value":"37.4192"},{"key":"LATITUDE","value":"Google"},{"key":"LATITUDE","value":"Google"},{"key":"LATITUDE","value":"19"},{"key":"LATITUDE","value":"80.1"},{"key":"LATITUDE","value":"10.1"},{"key":"LATITUDE","value":"0"}],[{"key":"ISP","value":"173.194.219.139"},{"key":"ISP","value":"United States"},{"key":"ISP","value":"CA"},{"key":"ISP","value":"Mountain View"},{"key":"ISP","value":"-122.0574"},{"key":"ISP","value":"37.4192"},{"key":"ISP","value":"Google"},{"key":"ISP","value":"Google"},{"key":"ISP","value":"18"},{"key":"ISP","value":"80.1"},{"key":"ISP","value":"10.1"},{"key":"ISP","value":"0"}],[{"key":"ORG","value":"174.111.102.224"},{"key":"ORG","value":"United States"},{"key":"ORG","value":"NC"},{"key":"ORG","value":"High Point"},{"key":"ORG","value":"-80.0053"},{"key":"ORG","value":"35.9557"},{"key":"ORG","value":"Time Warner Cable"},{"key":"ORG","value":"Time Warner Cable"},{"key":"ORG","value":"2"},{"key":"ORG","value":"80.1"},{"key":"ORG","value":"10.1"},{"key":"ORG","value":"0"}],[{"key":"LEVEL","value":"174.111.102.226"},{"key":"LEVEL","value":"United States"},{"key":"LEVEL","value":"NC"},{"key":"LEVEL","value":"High Point"},{"key":"LEVEL","value":"-80.0053"},{"key":"LEVEL","value":"35.9557"},{"key":"LEVEL","value":"Time Warner Cable"},{"key":"LEVEL","value":"Time Warner Cable"},{"key":"LEVEL","value":"2"},{"key":"LEVEL","value":"80.1"},{"key":"LEVEL","value":"10.1"},{"key":"LEVEL","value":"0"}],[{"key":"SIGNAL_STRENGTH","value":"205.197.180.41"},{"key":"SIGNAL_STRENGTH","value":"United States"},{"key":"SIGNAL_STRENGTH","value":"IL"},{"key":"SIGNAL_STRENGTH","value":"Chicago"},{"key":"SIGNAL_STRENGTH","value":"-87.6441"},{"key":"SIGNAL_STRENGTH","value":"41.8825"},{"key":"SIGNAL_STRENGTH","value":"XO Communications"},{"key":"SIGNAL_STRENGTH","value":"XO Communications"},{"key":"SIGNAL_STRENGTH","value":"6"},{"key":"SIGNAL_STRENGTH","value":"80.1"},{"key":"SIGNAL_STRENGTH","value":"10.1"},{"key":"SIGNAL_STRENGTH","value":"0"}],[{"key":"SIGNAL_NOISE","value":"205.197.180.54"},{"key":"SIGNAL_NOISE","value":"United States"},{"key":"SIGNAL_NOISE","value":"IL"},{"key":"SIGNAL_NOISE","value":"Chicago"},{"key":"SIGNAL_NOISE","value":"-87.6441"},{"key":"SIGNAL_NOISE","value":"41.8825"},{"key":"SIGNAL_NOISE","value":"XO Communications"},{"key":"SIGNAL_NOISE","value":"XO Communications"},{"key":"SIGNAL_NOISE","value":"7"},{"key":"SIGNAL_NOISE","value":"80.1"},{"key":"SIGNAL_NOISE","value":"10.1"},{"key":"SIGNAL_NOISE","value":"0"}]],"columnNames":[{"name":"IP","index":0,"aggr":"sum"},{"name":"COUNTRY","index":1,"aggr":"sum"},{"name":"REGION","index":2,"aggr":"sum"},{"name":"CITY","index":3,"aggr":"sum"},{"name":"LONGITUDE","index":4,"aggr":"sum"},{"name":"LATITUDE","index":5,"aggr":"sum"},{"name":"ISP","index":6,"aggr":"sum"},{"name":"ORG","index":7,"aggr":"sum"},{"name":"LEVEL","index":8,"aggr":"sum"},{"name":"SIGNAL_STRENGTH","index":9,"aggr":"sum"},{"name":"SIGNAL_NOISE","index":10,"aggr":"sum"},{"name":"HEALTH_STATUS","index":11,"aggr":"sum"}],"rows":[["108.170.232.70","United States","CA","Mountain View","-122.0574","37.4192","Google","Google","18","80.1","10.1","0"],["108.170.232.71","United States","CA","Mountain View","-122.0574","37.4192","Google","Google","11","80.1","10.1","0"],["108.170.235.157","United States","CA","Mountain View","-122.0574","37.4192","Google","Google","12","80.1","10.1","0"],["173.194.219.113","United States","CA","Mountain View","-122.0574","37.4192","Google","Google","18","80.1","10.1","0"],["173.194.219.138","United States","CA","Mountain View","-122.0574","37.4192","Google","Google","19","80.1","10.1","0"],["173.194.219.139","United States","CA","Mountain View","-122.0574","37.4192","Google","Google","18","80.1","10.1","0"],["174.111.102.224","United States","NC","High Point","-80.0053","35.9557","Time Warner Cable","Time Warner Cable","2","80.1","10.1","0"],["174.111.102.226","United States","NC","High Point","-80.0053","35.9557","Time Warner Cable","Time Warner Cable","2","80.1","10.1","0"],["205.197.180.41","United States","IL","Chicago","-87.6441","41.8825","XO Communications","XO Communications","6","80.1","10.1","0"],["205.197.180.54","United States","IL","Chicago","-87.6441","41.8825","XO Communications","XO Communications","7","80.1","10.1","0"]]},"dateCreated":"2017-01-03T13:24:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:123"},{"title":"Pick a Point-of-Interest (POI)","text":"%spark\n\nimport org.apache.spark.sql.functions.{regexp_extract}\nimport org.apache.spark.ml.feature.{RegexTokenizer, Tokenizer}\n\nval id = z.input(\"Enter POI (IP Address):\")\n\n// Extract POI Device\nval t0 = java.lang.System.currentTimeMillis()\nval POIDevice = queryToDS(connection, \"select * from device_info where ip = '\" + id + \"'\").collect()\n\n\nval deviceDS = queryToDS(connection, \"select * from device_topology where topology like '%\"+id+\"%'\")\nval devicetopology = deviceDS.collect\n\n\n// Extract Parent Devices\nval t1 = java.lang.System.currentTimeMillis()\nval pattern_parent = id.toString + \".+\"\nval parent_regexTokenizer = new RegexTokenizer().setInputCol(\"TOPOLOGY\").setOutputCol(\"parents\").setPattern(pattern_parent).setGaps(false)\nval parent_regexTokenized = parent_regexTokenizer.transform(deviceDS)\n    .select(\"parents\").withColumn(\"parents2\", regexp_replace($\"parents\"(0), id.toString+\"\\\\|\", \"\"))\n    .drop(\"parents\")\nval parentDevices     = parent_regexTokenized.select(\"parents2\").rdd.map(r => r(0).toString.split(\"\\\\|\")).flatMap(x => x).distinct().collect\nval parentDevicesStr  = parentDevices.mkString(\"|\")\nval parentDevicesInfo = queryToDS(connection, \"select * from device_info where ip in (\"+ parentDevices.map(x => \"'\"+x+\"'\").mkString(\",\") +\")\" ).collect\n\nval parent_runtime = (java.lang.System.currentTimeMillis() - t1).toString\n\n\n// Extract Children Devices\nval t2 = java.lang.System.currentTimeMillis()\nval pattern_children = \".*?\" + id.toString\nval children_regexTokenizer = new RegexTokenizer().setInputCol(\"TOPOLOGY\").setOutputCol(\"children\").setPattern(pattern_children).setGaps(false)\nval children_regexTokenized = children_regexTokenizer.transform(deviceDS)\n    .select(\"children\").withColumn(\"children2\", regexp_replace($\"children\"(0), id.toString+\"\\\\|\", \"\"))\n    .drop(\"children\")\nval childrenDevices     = children_regexTokenized.select(\"children2\").rdd.map(r => r(0).toString.split(\"\\\\|\")).flatMap(x => x).distinct().collect\nval childrenDevicesStr  = childrenDevices.mkString(\"|\")\nval childrenDevicesInfo = queryToDS(connection, \"select * from device_info where ip in (\"+ childrenDevices.map(x => \"'\"+x+\"'\").mkString(\",\") +\")\" ).collect\n\n\nprintln(\"\\r\\n\\r\\n\")\nprintln(\"Got \" + parentDevicesInfo.size.toString + \" parent devices in \" + parent_runtime + \" ms\")\nprintln(\"Got \" + childrenDevicesInfo.size.toString + \" child devices in \" + (java.lang.System.currentTimeMillis() - t2).toString + \" ms\")\nprintln(\"\\r\\n\\r\\n\")\n\n\nz.angularBind(\"poidevice\", POIDevice)\nz.angularBind(\"parents\", parentDevicesInfo)\nz.angularBind(\"parentsStr\", parentDevicesStr)\nz.angularBind(\"children\", childrenDevicesInfo)\nz.angularBind(\"childrenStr\", childrenDevicesStr)\nz.angularBind(\"devicetopology\", devicetopology)\nz.angularBind(\"id\", id)\nz.run(\"20161112-195716_1056217064\")\n\n\nchildrenDevicesInfo.foreach(x => println(x))","dateUpdated":"2017-01-03T13:24:42+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{"Enter POI (IP Address):":"localhost","IP:":"","id":"216.239.40.138"},"forms":{"Enter POI (IP Address):":{"name":"Enter POI (IP Address):","displayName":"Enter POI (IP Address):","type":"input","defaultValue":"","hidden":false}}},"jobName":"paragraph_1483449882791_-668488008","id":"20161218-042151_1028858024","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.sql.functions.regexp_extract\n\nimport org.apache.spark.ml.feature.{RegexTokenizer, Tokenizer}\n\nid: Object = localhost\n\nt0: Long = 1482296429655\n\nPOIDevice: Array[org.apache.spark.sql.Row] = Array([localhost,United States,NC,Raleigh,-78.6382,35.7796,Time Warner Cable,Time Warner Cable,1,80.0999984741211,10.100000381469727,0])\n\ndeviceDS: org.apache.spark.sql.DataFrame = [TOPOLOGY: string]\ndevicetopology: Array[org.apache.spark.sql.Row] = Array([localhost|174.111.102.224|24.25.62.48|24.93.64.184|24.93.67.200|66.109.6.80|216.50.79.33|216.50.79.66|216.239.62.139|216.239.48.95|216.239.49.181|216.239.48.95|216.239.48.9|216.239.48.6|216.239.40.138|209.85.142.139|209.85.241.71|216.58.218.14], [localhost|174.111.102.224|24.25.62.48|24.93.64.184|24.93.67.200|66.109.6.80|216.50.79.33|216.50.79.66|216.239.62.139|216.58.215.46|216.239.48.101|216.239.48.95|216.239.49.181|216.239.48.9|216.239.40.138|216.239.40.130|108.170.232.70|209.85.241.71|216.58.218.14], [localhost|174.111.102.224|24.25.62.48|24.93.64.184|24.93.67.200|66.109.6.80|216.50.79.33|216.50.79.66|216.239.62.139|216.58.215.46|216.239.48.101|216.239.49.181|216.239.48.101|216.239.48.6|216.239.48.9|216.239.40.138|216.239.40.1...\nt1: Long = 1482296466120\n\npattern_parent: String = localhost.+\n\nparent_regexTokenizer: org.apache.spark.ml.feature.RegexTokenizer = regexTok_2101c5f6106a\n\nparent_regexTokenized: org.apache.spark.sql.DataFrame = [parents2: string]\nparentDevices: Array[String] = Array(66.249.94.20, 174.111.102.224, 209.85.142.140, 205.197.180.41, 216.50.79.66, 64.233.175.12, 108.170.235.157, 108.170.232.71, 216.239.48.9, 66.109.6.82, 216.58.218.14, 173.194.219.139, 216.239.51.243, 216.50.79.33, 209.85.248.53, 173.194.219.113, 216.239.50.93, 216.239.50.97, 74.125.196.102, 216.239.51.47, 216.58.193.142, 216.239.48.95, 74.125.21.100, 64.233.174.133, 216.239.40.138, 216.239.48.101, 216.239.48.2, 216.239.56.166, 209.85.253.1, 209.85.142.138, 24.93.64.184, 64.233.185.100, 209.85.247.150, 209.85.142.149, 216.239.48.6, 209.85.254.107, 216.239.40.130, 24.93.67.200, 24.25.62.50, 66.109.6.80, 209.85.142.153, 209.85.243.254, 216.239.49.181, 64.233.185.138, 216.239.62.139, 74.125.21.101, 216.58.215.46, 209.85.142.139, 64.233.185.101, 64.233.17...parentDevicesStr: String = 66.249.94.20|174.111.102.224|209.85.142.140|205.197.180.41|216.50.79.66|64.233.175.12|108.170.235.157|108.170.232.71|216.239.48.9|66.109.6.82|216.58.218.14|173.194.219.139|216.239.51.243|216.50.79.33|209.85.248.53|173.194.219.113|216.239.50.93|216.239.50.97|74.125.196.102|216.239.51.47|216.58.193.142|216.239.48.95|74.125.21.100|64.233.174.133|216.239.40.138|216.239.48.101|216.239.48.2|216.239.56.166|209.85.253.1|209.85.142.138|24.93.64.184|64.233.185.100|209.85.247.150|209.85.142.149|216.239.48.6|209.85.254.107|216.239.40.130|24.93.67.200|24.25.62.50|66.109.6.80|209.85.142.153|209.85.243.254|216.239.49.181|64.233.185.138|216.239.62.139|74.125.21.101|216.58.215.46|209.85.142.139|64.233.185.101|64.233.175.94|209.85.142.157|74.125.196.100|216.239.51.245|205.197.1...parentDevicesInfo: Array[org.apache.spark.sql.Row] = Array([108.170.232.70,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,18,80.0999984741211,10.100000381469727,0], [108.170.232.71,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,11,80.0999984741211,10.100000381469727,0], [108.170.235.157,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,12,80.0999984741211,10.100000381469727,0], [173.194.219.113,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,18,80.0999984741211,10.100000381469727,0], [173.194.219.138,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,19,80.0999984741211,10.100000381469727,0], [173.194.219.139,United States,CA,Mountain View,-122.0574,37.4192,Google,Google,18,80.0999984741211,10.100000381469727,0], [1...\nparent_runtime: String = 3420\n\nt2: Long = 1482296469659\n\npattern_children: String = .*?localhost\n\nchildren_regexTokenizer: org.apache.spark.ml.feature.RegexTokenizer = regexTok_daf4810f868d\n\nchildren_regexTokenized: org.apache.spark.sql.DataFrame = [children2: string]\n\nchildrenDevices: Array[String] = Array(localhost)\n\nchildrenDevicesStr: String = localhost\n\nchildrenDevicesInfo: Array[org.apache.spark.sql.Row] = Array([localhost,United States,NC,Raleigh,-78.6382,35.7796,Time Warner Cable,Time Warner Cable,1,80.0999984741211,10.100000381469727,0])\n\r\n\r\n\nGot 70 parent devices in 3420 ms\nGot 1 child devices in 3215 ms\n\r\n\r\n\n[localhost,United States,NC,Raleigh,-78.6382,35.7796,Time Warner Cable,Time Warner Cable,1,80.0999984741211,10.100000381469727,0]\n"},"dateCreated":"2017-01-03T13:24:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:124"},{"title":"Google Map of IP Traceroute (from home wifi, in Raleigh, to Google.com servers)","text":"%angular\n<div id=\"map\" style=\"height:500px;width:100%;\"></div>\n<script type=\"text/javascript\">\nfunction circle(pos, color, info, map){\n    var circle = new google.maps.Circle({\n        strokeColor: color,\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: color,\n        fillOpacity: 0.35,\n        map: map,\n        center: pos,\n        radius: 30000   //default: 6.5\n    });\n    var info = new google.maps.InfoWindow({content: info});\n    circle.addListener('click', function(){\n        info.open(map, circle);\n        info.setPosition(circle.getCenter());\n    });\n}\n\nfunction line(coords, dashed, map){\n    var lineConf = {\n        path: coords,\n        geodesic: true,\n        strokeColor: '#000000',\n        strokeOpacity: 0.75,\n        strokeWeight: 2  // default = 1\n    };\n    if (dashed) lineConf.icons = [{\n        icon: { path: 'M 0,-1 0,1', strokeOpacity: 1, scale: 3 },\n        offset: '0',\n        repeat: '20px'\n    }];\n    var path = new google.maps.Polyline(lineConf);\n    path.setMap(map);\n}\n\nfunction initMap() {\n    var id = window.angularVars.id;\n    var poidevice = window.angularVars.poidevice;\n    var children = window.angularVars.children;\n    var childrenStr = window.angularVars.childrenStr;\n    var parents = window.angularVars.parents;\n    var parentsStr = window.angularVars.parentsStr;\n    var devicetopology = window.angularVars.devicetopology;\n    var POIs = {};\n\n    console.log('POI Value: ' + poidevice[0].values);\n    console.log('Topology Value: ' + devicetopology[0].values.toString().split(\"|\")[0]);\n\n    var USA = {lat: 39.8282, lng: -98.5795};\n    var map = new google.maps.Map(document.getElementById('map'), {zoom: 5, center: USA });\n\n    //**********************************************************************************\n    //\n    //  Draw circle POI Device\n    //\n    //**********************************************************************************\n    $.each(poidevice, function(i, v){\n        POIs[v.values[0]] = v.values;\n        //Create marker for each POI\n        var pos = {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color = (v.values[11] == '1.0') ? '#FF0000' : '#008000';\n        var info = '<b>IP</b>: ' + v.values[0] + '<p><b>ISP:</b> ' + v.values[6] + '<p>' + v.values[3] + \", \" + v.values[2];\n        console.log('Drawing POI device: ' + v.values[0] + ' ' + JSON.stringify(pos) + ' ' + v.values[5] + ',' + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw circles for each Parent POI\n    //\n    //**********************************************************************************\n    $.each(parents, function(i, v){\n        POIs[v.values[0]] = v.values;\n        //Create marker for each POI\n        var pos = {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color = (v.values[11] == '1.0') ? '#FF0000' : '#008000';\n        var info = '<b>IP</b>: ' + v.values[0] + '<p><b>ISP:</b> ' + v.values[6] + '<p>' + v.values[3] + \", \" + v.values[2];\n        console.log('Drawing parent device: ' + v.values[0] + ' ' + JSON.stringify(pos) + ' ' + v.values[5] + ',' + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw circles for each Child POI\n    //\n    //**********************************************************************************\n    $.each(children, function(i, v){\n        POIs[v.values[0]] = v.values;\n        //Create marker for each POI\n        var pos = {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color = (v.values[11] == '1.0') ? '#FF0000' : '#008000';\n        var info = '<b>IP</b>: ' + v.values[0] + '<p><b>ISP:</b> ' + v.values[6] + '<p>' + v.values[3] + \", \" + v.values[2];\n        console.log('Drawing child device: ' + v.values[0] + ' ' + JSON.stringify(pos) + ' ' + v.values[5] + ',' + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw Google Maps polylines\n    //\n    //**********************************************************************************\n    \n    var POI = poidevice[0].values;\n    var start = {lat: parseFloat(POI[5]), lng: parseFloat(POI[4])};\n\n    var coords     = [];\n    var seen_cords = [];\n    //var coords = [start];\n  \n    // Loop through each device topology that contains POI\n    $.each(devicetopology, function(j, k){\n        var topology = k.values.toString().split(\"|\");\n        var coords     = [];\n        var seen_cords = [];\n        for (i = 0; i < topology.length; i++) {\n            try{\n                var lat = POIs[topology[i]][5];\n                var lon = POIs[topology[i]][4];\n                //if ( seen_cords.indexOf(lat + '_' + lon) == -1 ){\n                    //coords.push({lat: parseFloat(POIs[topology[i]][5]), lng: parseFloat(POIs[topology[i]][4]) });\n                    coords.push({lat: parseFloat(lat), lng: parseFloat(lon) });\n                    seen_cords.push(lat + '_' + lon);\n                    //console.log(\"seen cords: \" + lat + '_' + lon);\n                //};\n            }\n            catch (exception) {\n            };\n        };\n        console.log('Drawing topology ' + JSON.stringify(coords));\n        line(coords, false, map);\n    });\n\n    map.setCenter(start);\n\n}\n\n//Only load GMaps once\nif (typeof google === 'object' && typeof google.maps === 'object') initMap();\nelse {\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    //Replace with your API key\n    var apiKey = '<your_api_key';\n    script.src = \"https://maps.googleapis.com/maps/api/js?key=\"+apiKey+\"&callback=initMap\";\n    document.body.appendChild(script);\n}\n</script>","dateUpdated":"2017-01-03T13:50:06+0000","config":{"lineNumbers":true,"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483449882791_-668488008","id":"20161112-195716_1056217064","result":{"code":"SUCCESS","type":"ANGULAR","msg":"<div id=\"map\" style=\"height:500px;width:100%;\"></div>\n<script type=\"text/javascript\">\nfunction circle(pos, color, info, map){\n    var circle = new google.maps.Circle({\n        strokeColor: color,\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: color,\n        fillOpacity: 0.35,\n        map: map,\n        center: pos,\n        radius: 30000   //default: 6.5\n    });\n    var info = new google.maps.InfoWindow({content: info});\n    circle.addListener('click', function(){\n        info.open(map, circle);\n        info.setPosition(circle.getCenter());\n    });\n}\n\nfunction line(coords, dashed, map){\n    var lineConf = {\n        path: coords,\n        geodesic: true,\n        strokeColor: '#000000',\n        strokeOpacity: 0.75,\n        strokeWeight: 2  // default = 1\n    };\n    if (dashed) lineConf.icons = [{\n        icon: { path: 'M 0,-1 0,1', strokeOpacity: 1, scale: 3 },\n        offset: '0',\n        repeat: '20px'\n    }];\n    var path = new google.maps.Polyline(lineConf);\n    path.setMap(map);\n}\n\nfunction initMap() {\n    var id = window.angularVars.id;\n    var poidevice = window.angularVars.poidevice;\n    var children = window.angularVars.children;\n    var childrenStr = window.angularVars.childrenStr;\n    var parents = window.angularVars.parents;\n    var parentsStr = window.angularVars.parentsStr;\n    var devicetopology = window.angularVars.devicetopology;\n    var POIs = {};\n\n    console.log('POI Value: ' + poidevice[0].values);\n    console.log('Topology Value: ' + devicetopology[0].values.toString().split(\"|\")[0]);\n\n    var USA = {lat: 39.8282, lng: -98.5795};\n    var map = new google.maps.Map(document.getElementById('map'), {zoom: 5, center: USA });\n\n    //**********************************************************************************\n    //\n    //  Draw circle POI Device\n    //\n    //**********************************************************************************\n    $.each(poidevice, function(i, v){\n        POIs[v.values[0]] = v.values;\n        //Create marker for each POI\n        var pos = {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color = (v.values[11] == '1.0') ? '#FF0000' : '#008000';\n        var info = '<b>IP</b>: ' + v.values[0] + '<p><b>ISP:</b> ' + v.values[6] + '<p>' + v.values[3] + \", \" + v.values[2];\n        console.log('Drawing POI device: ' + v.values[0] + ' ' + JSON.stringify(pos) + ' ' + v.values[5] + ',' + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw circles for each Parent POI\n    //\n    //**********************************************************************************\n    $.each(parents, function(i, v){\n        POIs[v.values[0]] = v.values;\n        //Create marker for each POI\n        var pos = {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color = (v.values[11] == '1.0') ? '#FF0000' : '#008000';\n        var info = '<b>IP</b>: ' + v.values[0] + '<p><b>ISP:</b> ' + v.values[6] + '<p>' + v.values[3] + \", \" + v.values[2];\n        console.log('Drawing parent device: ' + v.values[0] + ' ' + JSON.stringify(pos) + ' ' + v.values[5] + ',' + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw circles for each Child POI\n    //\n    //**********************************************************************************\n    $.each(children, function(i, v){\n        POIs[v.values[0]] = v.values;\n        //Create marker for each POI\n        var pos = {lat: parseFloat(v.values[5]), lng: parseFloat(v.values[4]) };\n        var color = (v.values[11] == '1.0') ? '#FF0000' : '#008000';\n        var info = '<b>IP</b>: ' + v.values[0] + '<p><b>ISP:</b> ' + v.values[6] + '<p>' + v.values[3] + \", \" + v.values[2];\n        console.log('Drawing child device: ' + v.values[0] + ' ' + JSON.stringify(pos) + ' ' + v.values[5] + ',' + v.values[4]);\n        circle(pos, color, info, map);\n    });\n\n    //**********************************************************************************\n    //\n    //  Draw Google Maps polylines\n    //\n    //**********************************************************************************\n    \n    var POI = poidevice[0].values;\n    var start = {lat: parseFloat(POI[5]), lng: parseFloat(POI[4])};\n\n    var coords     = [];\n    var seen_cords = [];\n    //var coords = [start];\n  \n    // Loop through each device topology that contains POI\n    $.each(devicetopology, function(j, k){\n        var topology = k.values.toString().split(\"|\");\n        var coords     = [];\n        var seen_cords = [];\n        for (i = 0; i < topology.length; i++) {\n            try{\n                var lat = POIs[topology[i]][5];\n                var lon = POIs[topology[i]][4];\n                //if ( seen_cords.indexOf(lat + '_' + lon) == -1 ){\n                    //coords.push({lat: parseFloat(POIs[topology[i]][5]), lng: parseFloat(POIs[topology[i]][4]) });\n                    coords.push({lat: parseFloat(lat), lng: parseFloat(lon) });\n                    seen_cords.push(lat + '_' + lon);\n                    //console.log(\"seen cords: \" + lat + '_' + lon);\n                //};\n            }\n            catch (exception) {\n            };\n        };\n        console.log('Drawing topology ' + JSON.stringify(coords));\n        line(coords, false, map);\n    });\n\n    map.setCenter(start);\n\n}\n\n//Only load GMaps once\nif (typeof google === 'object' && typeof google.maps === 'object') initMap();\nelse {\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    //Replace with your API key\n    //var apiKey = 'AIzaSyAo9kHi0vp_Up_iqeUNyDOzxiaVan8CY50';\n    var apiKey = 'AIzaSyDelWwzG32w6aDi9WsLiw2qP_JHAbQHG3A';\n    script.src = \"https://maps.googleapis.com/maps/api/js?key=\"+apiKey+\"&callback=initMap\";\n    document.body.appendChild(script);\n}\n</script>"},"dateCreated":"2017-01-03T13:24:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:125"},{"text":"","dateUpdated":"2017-01-03T13:24:42+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1483449882791_-668488008","id":"20161116-161810_782876520","dateCreated":"2017-01-03T13:24:42+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:126"}],"name":"Dashboard","id":"2C7VF1BCV","angularObjects":{"2C67TB76J:shared_process":[],"2C684A2YR:shared_process":[],"2C5ETAQS7:shared_process":[],"2C84BXXHX:shared_process":[],"2C7UC8D1G:shared_process":[],"2C6D7RHPF:shared_process":[],"2C6KSDU5H:shared_process":[],"2C4M3A8QR:shared_process":[],"2C57ZZ47H:shared_process":[],"2C5EH9BS3:shared_process":[],"2C6RVZG65:shared_process":[],"2C7DH7W18:shared_process":[],"2C79VH82Z:shared_process":[],"2C5WXJTJS:shared_process":[],"2C7G1ZSH4:shared_process":[],"2C5XPWR7X:shared_process":[],"2C6T2VKJB:shared_process":[],"2C4KYY6A4:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}